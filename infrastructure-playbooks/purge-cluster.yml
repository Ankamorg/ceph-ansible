---
# This playbook purges Ceph
# It removes: packages, configuration files and ALL THE DATA
#
# Use it like this:
# ansible-playbook purge-cluster.yml
#     Prompts for confirmation to purge, defaults to no and
#     doesn't purge the cluster. yes purges the cluster.
#
# ansible-playbook -e ireallymeanit=yes|no purge-cluster.yml
#     Overrides the prompt using -e option. Can be used in
#     automation scripts to avoid interactive prompt.

- name: confirm whether user really meant to purge the cluster
  hosts: localhost
  gather_facts: false

  vars_prompt:
    - name: ireallymeanit
      prompt: Are you sure you want to purge the cluster?
      default: 'no'
      private: no

  tasks:
  - name: exit playbook, if user did not mean to purge cluster
    fail:
      msg: >
        "Exiting purge-cluster playbook, cluster was NOT purged.
         To purge the cluster, either say 'yes' on the prompt or
         or use `-e ireallymeanit=yes` on the command line when
         invoking the playbook"
    when: ireallymeanit != 'yes'


- name: gather facts and check if using systemd

  vars:
    mon_group_name:       mons
    osd_group_name:       osds
    rgw_group_name:       rgws

  hosts:
    - "{{ mon_group_name }}"
    - "{{ osd_group_name }}"
    - "{{ rgw_group_name }}"

  become: true

  tasks:
  - name: are we using systemd
    shell: "if [ -d /usr/lib/systemd ] ; then find /usr/lib/systemd/system -name 'ceph*' | wc -l ; else echo 0 ; fi"
    register: systemd_unit_files


- name: purge ceph rgw cluster

  vars:
    rgw_group_name: rgws

  hosts:
    - "{{ rgw_group_name }}"

  gather_facts: false # Already gathered previously

  become: true

  tasks:
  - include_vars: roles/ceph-common/defaults/main.yml
  - include_vars: roles/ceph-rgw/defaults/main.yml
  - include_vars: group_vars/all.yml
    failed_when: false
  - include_vars: group_vars/{{ rgw_group_name }}.yml
    failed_when: false
  - name: stop ceph rgws
    shell: "ps faux|grep -sq [c]eph-radosgw && pkill ceph-radosgw"
    when:
      ansible_os_family == 'RedHat'

  - name: remove data
    file:
      path: /var/lib/ceph/
      state: absent

- name: purge ceph osd cluster

  vars:
    osd_group_name: osds

# When set to true and raw _multi_journal is used then block devices are also zapped
    zap_block_devs: true

  hosts:
    - "{{ osd_group_name }}"

  gather_facts: false # Already gathered previously

  become: true

  handlers:
  - name: restart machine
    shell: sleep 2 && shutdown -r now "Ansible updates triggered"
    async: 1
    poll: 0
    ignore_errors: true

  - name: wait for server to boot
    become: false
    local_action: wait_for port=22 host={{ inventory_hostname }} state=started delay=10 timeout=500

  - name: remove data
    file:
      path: /var/lib/ceph/
      state: absent

  tasks:
  - include_vars: roles/ceph-common/defaults/main.yml
  - include_vars: roles/ceph-osd/defaults/main.yml
  - include_vars: group_vars/all.yml
    failed_when: false
  - include_vars: group_vars/{{ osd_group_name }}.yml
    failed_when: false

  - name: check for a device list
    fail:
      msg: "OSD automatic discovery was detected, purge cluster does not support this scenario. If you want to purge the cluster, manually provide the list of devices in group_vars/{{ osd_group_name }} using the devices variable."
    when:
      devices|length == 0 and
      osd_auto_discovery

  - name: get osd numbers
    shell: "if [ -d /var/lib/ceph/osd ] ; then ls /var/lib/ceph/osd | cut -d '-' -f 2 ; fi"
    register: osd_ids
    changed_when: false

  - name: stop ceph-osd with systemd
    service:
      name: ceph-osd@{{item}}
      state: stopped
      enabled: no
    with_items: "{{ osd_ids.stdout_lines }}"
    when:
      ansible_os_family == 'RedHat' and
      systemd_unit_files.stdout != "0"

  - name: get ceph journal partitions
    shell: |
      blkid | awk '/ceph journal/ { sub (":", "", $1); print $1 }'
    failed_when: false
    register: ceph_journal_partition_to_erase_path

  - name: get osd data mount points
    shell: "(grep /var/lib/ceph/osd /proc/mounts || echo -n) | awk '{ print $2 }'"
    register: mounted_osd
    changed_when: false

  - name: drop all cache
    shell: "sync && sleep 1 && echo 3 > /proc/sys/vm/drop_caches"

  - name: umount osd data partition
    shell: umount {{ item }}
    with_items:
     - "{{ mounted_osd.stdout_lines }}"


  - name: zap ceph journal partitions
    shell: |
      # if the disk passed is a raw device AND the boot system disk
      if echo "{{ item }}" | egrep -sq '/dev/([hsv]d[a-z]{1,2}|cciss/c[0-9]d[0-9]p|nvme[0-9]n[0-9]p){1,2}$' && parted -s $(echo "{{ item }}" | egrep -o '/dev/([hsv]d[a-z]{1,2}|cciss/c[0-9]d[0-9]p|nvme[0-9]n[0-9]p){1,2}') print | grep -sq boot; then
        echo "Looks like {{ item }} has a boot partition,"
        echo "if you want to delete specific partitions point to the partition instead of the raw device"
        echo "Do not use your system disk!"
        exit 1
      fi
      raw_device=$(echo "{{ item }}" | egrep -o '/dev/([hsv]d[a-z]{1,2}|cciss/c[0-9]d[0-9]p|nvme[0-9]n[0-9]p){1,2}')
      partition_nb=$(echo "{{ item }}" | egrep -o '[0-9]{1,2}$')
      sgdisk --delete $partition_nb $raw_device
      ceph-disk zap $raw_device
    with_items: "{{ ceph_journal_partition_to_erase_path.stdout_lines }}"
    when:
      zap_block_devs

  - name: remove data
    file:
      path: /var/lib/ceph/
      state: absent


- name: purge ceph mon cluster

  vars:
    mon_group_name:       mons
    restapi_group_name:   restapis

  hosts:
    - "{{ mon_group_name }}"

  gather_facts: false # Already gathered previously

  become: true

  tasks:
  - include_vars: roles/ceph-common/defaults/main.yml
  - include_vars: roles/ceph-mon/defaults/main.yml
  - include_vars: roles/ceph-restapi/defaults/main.yml
  - include_vars: group_vars/all.yml
    failed_when: false
  - include_vars: group_vars/{{ mon_group_name }}.yml
    failed_when: false
  - include_vars: group_vars/{{ restapi_group_name }}.yml
    failed_when: false

  - name: stop ceph.target with systemd
    service:
      name: ceph.target
      state: stopped
      enabled: no
    when:
      ansible_os_family == 'RedHat' and
      systemd_unit_files.stdout != "0"

  - name: stop ceph mons with systemd
    service:
      name: ceph-mon@{{ ansible_hostname }}
      state: stopped
      enabled: no
    when:
      ansible_os_family == 'RedHat' and
      systemd_unit_files.stdout != "0"

  - name: stop ceph mons
    shell: "service ceph status mon ; if [ $? == 0 ] ; then service ceph stop mon ; else echo ; fi"
    when:
      ansible_os_family == 'RedHat'

  - name: stop ceph mons on ubuntu
    command: initctl stop ceph-mon cluster={{ cluster }} id={{ ansible_hostname }}
    failed_when: false
    when:
      ansible_distribution == 'Ubuntu'

  - name: remove monitor store and bootstrap keys
    file:
      path: /var/lib/ceph/
      state: absent

- name: final cleanup - check any running ceph, purge ceph packages, purge config and remove data

  vars:
    mon_group_name:       mons
    osd_group_name:       osds
    rgw_group_name:       rgws


# When set to true both groups of packages are purged.
# This can cause problem with qemu-kvm
    purge_all_packages: true

    ceph_packages:
      - ceph
      - ceph-common
      - ceph-fs-common
      - ceph-fuse
      - ceph-mds
      - ceph-release
      - ceph-radosgw

    ceph_remaining_packages:
      - libcephfs1
      - librados2
      - libradosstriper1
      - librbd1
      - python-cephfs
      - python-rados
      - python-rbd

  hosts:
    - "{{ mon_group_name }}"
    - "{{ osd_group_name }}"
    - "{{ rgw_group_name }}"


  gather_facts: false # Already gathered previously

  become: true

  handlers:
  - name: remove data
    file:
     path: /var/lib/ceph
     state: absent

  tasks:
  - name: check for anything running ceph
    shell: "ps awux | grep -- /usr/bin/[c]eph-"
    register: check_for_running_ceph
    failed_when: check_for_running_ceph.rc == 0

  - name: purge ceph packages with yum
    yum:
      name: "{{ item }}"
      state: absent
    with_items:
      - "{{ ceph_packages }}"
    when:
      ansible_pkg_mgr == 'yum'

  - name: purge ceph packages with dnf
    dnf:
      name: "{{ item }}"
      state: absent
    with_items:
      - "{{ ceph_packages }}"
    when:
      ansible_pkg_mgr == 'dnf'

  - name: purge remaining ceph packages with yum
    yum:
      name: "{{ item }}"
      state: absent
    with_items:
      - "{{ ceph_remaining_packages }}"
    when:
      ansible_pkg_mgr == 'yum' and
      purge_all_packages == true

  - name: purge remaining ceph packages with dnf
    dnf:
      name: "{{ item }}"
      state: absent
    with_items:
      - "{{ ceph_remaining_packages }}"
    when:
      ansible_pkg_mgr == 'dnf' and
      purge_all_packages == true

  - name: remove config
    file:
     path: /etc/ceph
     state: absent

  - name: remove logs
    file:
     path: /var/log/ceph
     state: absent

  - name: request data removal
    local_action: shell echo requesting data removal
    become: false
    notify:
      - remove data

  - name: purge dnf cache
    command: dnf clean all
    when:
      ansible_pkg_mgr == 'dnf'

  - name: purge RPM cache in /tmp
    file:
      path: /tmp/rh-storage-repo
      state: absent

  - name: purge rh_storage.repo file in /etc/yum.repos.d
    file:
      path: /etc/yum.repos.d/rh_storage.repo
      state: absent
    when:
      ansible_os_family == 'RedHat'


- name: purge fetch directory

  vars:
    mon_group_name:       mons
    osd_group_name:       osds
    rgw_group_name:       rgws
    restapi_group_name:   restapis

  hosts:
    - localhost

  gather_facts: false

  tasks:
  - include_vars: roles/ceph-common/defaults/main.yml
  - include_vars: group_vars/all.yml
    failed_when: false
  - include_vars: group_vars/{{ rgw_group_name }}.yml
    failed_when: false
  - include_vars: group_vars/{{ osd_group_name }}.yml
    failed_when: false
  - include_vars: group_vars/{{ mon_group_name }}.yml
    failed_when: false
  - include_vars: group_vars/{{ restapi_group_name }}.yml
    failed_when: false

  - name: purge fetch directory for localhost
    file:
      path: "{{ fetch_directory }}"
      state: absent
